eRootLevel = (ts.getEmitScriptTarget(compilerOptions) !== 99 /* ScriptTarget.ESNext */ || !useDefineForClassFields) &&
                            (ts.some(node.parent.members, isInstancePropertyWithInitializerOrPrivateIdentifierProperty) ||
                                ts.some(node.parameters, function (p) { return ts.hasSyntacticModifier(p, 16476 /* ModifierFlags.ParameterPropertyModifier */); }));
                        if (superCallShouldBeRootLevel) {
                            // Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
                            // See GH #8277
                            if (!superCallIsRootLevelInConstructor(superCall, node.body)) {
                                error(superCall, ts.Diagnostics.A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_initialized_properties_parameter_properties_or_private_identifiers);
                            }
                            // Skip past any prologue directives to check statements for referring to 'super' or 'this' before a super call
                            else {
                                var superCallStatement = void 0;
                                for (var _i = 0, _a = node.body.statements; _i < _a.length; _i++) {
                                    var statement = _a[_i];
                                    if (ts.isExpressionStatement(statement) && ts.isSuperCall(ts.skipOuterExpressions(statement.expression))) {
                                        superCallStatement = statement;
                                        break;
                                    }
                                    if (nodeImmediatelyReferencesSuperOrThis(statement)) {
                                        break;
                                    }
                                }
                                // Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
                                // See GH #8277
                                if (superCallStatement === undefined) {
                                    error(node, ts.Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_class_contains_initialized_properties_parameter_properties_or_private_identifiers);
                                }
                            }
                        }
                    }
                    else if (!classExtendsNull) {
                        error(node, ts.Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);
                    }
                }
            }
        }
        function superCallIsRootLevelInConstructor(superCall, body) {
            var superCallParent = ts.walkUpParenthesizedExpressions(superCall.parent);
            return ts.isExpressionStatement(superCallParent) && superCallParent.parent === body;
        }
        function nodeImmediatelyReferencesSuperOrThis(node) {
            if (node.kind === 106 /* SyntaxKind.SuperKeyword */ || node.kind === 108 /* SyntaxKind.ThisKeyword */) {
                return true;
            }
            if (ts.isThisContainerOrFunctionBlock(node)) {
                return false;
            }
            return !!ts.forEachChild(node, nodeImmediatelyReferencesSuperOrThis);
        }
        function checkAccessorDeclaration(node) {
            if (ts.isIdentifier(node.name) && ts.idText(node.name) === "constructor") {
                error(node.name, ts.Diagnostics.Class_constructor_may_not_be_an_accessor);
            }
            addLazyDiagnostic(checkAccessorDeclarationDiagnostics);
            checkSourceElement(node.body);
            setNodeLinksForPrivateIdentifierScope(node);
            function checkAccessorDeclarationDiagnostics() {
                // Grammar checking accessors
                if (!checkGrammarFunctionLikeDeclaration(node) && !checkGrammarAccessor(node))
                    checkGrammarComputedPropertyName(node.name);
                checkDecorators(node);
                checkSignatureDeclaration(node);
                if (node.kind === 172 /* SyntaxKind.GetAccessor */) {
                    if (!(node.flags & 16777216 /* NodeFlags.Ambient */) && ts.nodeIsPresent(node.body) && (node.flags & 256 /* NodeFlags.HasImplicitReturn */)) {
                        if (!(